IF (COMPILE_DEVICE_LIBRARY)
  PREPARE_DEVICE(dragonfly2 TYPE DragonflyDeviceDriver2 INCLUDE DragonflyDeviceDriver2.h WRAPPER grabber)
ENDIF (COMPILE_DEVICE_LIBRARY)

IF(NOT SKIP_dragonfly2)
  FIND_PACKAGE(YARP REQUIRED)
  FIND_PACKAGE(DRAGONFLYAPI)
  
  SET (EXTRA_SOURCES)
  IF(NOT DRAGONFLYAPI_FOUND)
	MESSAGE(SEND_ERROR "dragonfly2: dragonfly api not found, turn off device")
  ELSE(NOT DRAGONFLYAPI_FOUND)

  IF (WIN32)
	LINK_LIBRARIES(${DRAGONFLYAPI_LIB})
	INCLUDE_DIRECTORIES(${DRAGONFLYAPI_INC_DIRS})
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/common)
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/winnt)

    SET(EXTRA_SOURCES winnt/FirewireCameraDC1394-DR2_2.h winnt/FirewireCameraDC1394-DR2_2.cpp)
	ADD_LIBRARY(dragonfly2 common/DragonflyDeviceDriver2.h common/DragonflyDeviceDriver2.cpp ${EXTRA_SOURCES})

  ELSE (WIN32)
    LINK_LIBRARIES(${DRAGONFLYAPI_LIB})
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/common)
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/linux)

	SET(EXTRA_SOURCES linux/FirewireCameraDC1394-DR2_2.h linux/FirewireCameraDC1394-DR2_2.cpp)
	ADD_LIBRARY(dragonfly2 common/DragonflyDeviceDriver2.h common/DragonflyDeviceDriver2.cpp ${EXTRA_SOURCES})  
  ENDIF (WIN32)

  ENDIF(NOT DRAGONFLYAPI_FOUND)

ENDIF(NOT SKIP_dragonfly2)
