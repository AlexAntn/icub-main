
MESSAGE(STATUS "Looking for ODE")

# Find the ODE Library.

## hopefully better handling of ode's dlls and static libraries, for windows
# ask Lorenzo if you have troubles.

# find (all) header files for include directories:
IF (NOT ODE_DIR)
	SET (ODE_ENV_DIR $ENV{ODE_DIR})
	IF (ODE_ENV_DIR)
		FIND_PATH(ODE_DIR include/ode/ode.h "$ENV{ODE_DIR}")
	ELSE (ODE_ENV_DIR)
		FIND_PATH(ODE_DIR include/ode/ode.h ${CMAKE_PROJECT_DIR})
	ENDIF (ODE_ENV_DIR)
ENDIF (NOT ODE_DIR)

FIND_PATH(ODE_INCLUDE_DIRS ode/ode.h "${ODE_DIR}/include")
MARK_AS_ADVANCED(ODE_INCLUDE_DIRS)

SET (ODE_SYSTEM_LIBS)
SET (ODE_SYSTEM_LIBS_FOUND FALSE)
SET (ODE_FOUND FALSE)

IF (MSVC)

	#Static libs
  FIND_LIBRARY(ODE_MAIN_STATIC_DB ode "${ODE_DIR}/lib/debuglib")
  FIND_LIBRARY(ODE_MAIN_STATIC_RE ode "${ODE_DIR}/lib/releaselib")
  FIND_LIBRARY(ODE_MAIN_LIBRARY_DB ode "${ODE_DIR}/lib/debugdll")
  FIND_LIBRARY(ODE_MAIN_LIBRARY_RE ode "${ODE_DIR}/lib/releasedll")

  IF (NOT ODE_FOUND)
  FIND_LIBRARY(ODE_MAIN_STATIC_DB ode_singled "${ODE_DIR}/lib/debugsinglelib")
  FIND_LIBRARY(ODE_MAIN_STATIC_RE ode_single "${ODE_DIR}/lib/releasesinglelib")
  FIND_LIBRARY(ODE_MAIN_LIBRARY_DB ode_singled "${ODE_DIR}/lib/debugsingledll")
  FIND_LIBRARY(ODE_MAIN_LIBRARY_RE ode_single "${ODE_DIR}/lib/releasesingledll")
  ENDIF (NOT ODE_FOUND)
  
  IF (NOT ODE_FOUND)
  FIND_LIBRARY(ODE_MAIN_STATIC_DB ode_doubled "${ODE_DIR}/lib/debugdoublelib")
  FIND_LIBRARY(ODE_MAIN_STATIC_RE ode_double "${ODE_DIR}/lib/releasedoublelib")
  FIND_LIBRARY(ODE_MAIN_LIBRARY_DB ode_doubled "${ODE_DIR}/lib/debugdoubledll")
  FIND_LIBRARY(ODE_MAIN_LIBRARY_RE ode_double "${ODE_DIR}/lib/releasedoubledll")
  ENDIF (NOT ODE_FOUND)
  
  
  MARK_AS_ADVANCED(ODE_MAIN_STATIC_DB 
                   ODE_MAIN_STATIC_RE)
  MARK_AS_ADVANCED(ODE_MAIN_LIBRARY_DB 
                   ODE_MAIN_LIBRARY_RE)

  SET(ODE_SYSTEM_LIBS opengl32 glu32)
  SET (ODE_SYSTEM_LIBS_FOUND TRUE)

  SET(ODE_STATIC TRUE CACHE BOOL "Link ODE as static library? Warning in windows, to coexist with YARP you need to set this to FALSE")
  IF (ODE_MAIN_STATIC_DB OR ODE_MAIN_LIBRARY_DB OR ODE_MAIN_STATIC_RE OR ODE_MAIN_LIBRARY_RE)
	MARK_AS_ADVANCED(CLEAR ODE_STATIC)
  ELSE (ODE_MAIN_STATIC_DB OR ODE_MAIN_LIBRARY_DB OR ODE_MAIN_STATIC_RE OR ODE_MAIN_LIBRARY_RE)
	MARK_AS_ADVANCED(ODE_STATIC)
  ENDIF (ODE_MAIN_STATIC_DB OR ODE_MAIN_LIBRARY_DB OR ODE_MAIN_STATIC_RE OR ODE_MAIN_LIBRARY_RE)

  IF(ODE_STATIC)
	IF (ODE_MAIN_STATIC_RE AND ODE_SYSTEM_LIBS_FOUND AND ODE_INCLUDE_DIRS)
	  SET (ODE_FOUND TRUE)
	  SET (ODE_LIBRARIES "${ODE_SYSTEM_LIBS};optimized;${ODE_MAIN_STATIC_RE};debug;${ODE_MAIN_STATIC_DB};")
	ENDIF (ODE_MAIN_STATIC_RE AND ODE_SYSTEM_LIBS_FOUND AND ODE_INCLUDE_DIRS)
  ELSE(ODE_STATIC)
	IF (ODE_MAIN_LIBRARY_RE AND ODE_SYSTEM_LIBS_FOUND AND ODE_INCLUDE_DIRS)
	  SET (ODE_FOUND TRUE)
	  SET (ODE_LIBRARIES "${ODE_SYSTEM_LIBS};optimized;${ODE_MAIN_LIBRARY_RE};debug;${ODE_MAIN_LIBRARY_DB};")
	ENDIF (ODE_MAIN_LIBRARY_RE AND ODE_SYSTEM_LIBS_FOUND AND ODE_INCLUDE_DIRS)
  ENDIF(ODE_STATIC)
ELSE (MSVC) 

  FIND_LIBRARY(ODE_MAIN_LIBRARY ode libode "${ODE_DIR}/lib" "${ODE_DIR}/ode/src" "${ODE_DIR}/ode/src/.libs")
  MARK_AS_ADVANCED(ODE_MAIN_LIBRARY)

  FIND_PACKAGE(OpenGL)
  IF (NOT OPENGL_FOUND)
	MESSAGE(STATUS "Cannot find OpenGL, but ODE needs it")
  ENDIF (NOT OPENGL_FOUND)
  SET (ODE_SYSTEM_LIBS ${OPENGL_LIBRARIES})
  SET (ODE_SYSTEM_LIBS_FOUND ${OPENGL_FOUND})

  IF (ODE_MAIN_LIBRARY AND ODE_SYSTEM_LIBS_FOUND AND ODE_INCLUDE_DIRS)
	SET (ODE_FOUND TRUE)
	SET (ODE_LIBRARIES ${ODE_MAIN_LIBRARY} ${ODE_SYSTEM_LIBS})
	#MESSAGE (STATUS "ODE libraries: ${ODE_LIBRARIES}")
  ENDIF (ODE_MAIN_LIBRARY AND ODE_SYSTEM_LIBS_FOUND AND ODE_INCLUDE_DIRS)
  
ENDIF (MSVC)

IF (ODE_FOUND)
    IF (NOT ODE_FIND_QUIETLY)
        MESSAGE(STATUS "Found ODE: ${ODE_LIBRARIES}")
    ENDIF (NOT ODE_FIND_QUIETLY)
ELSE (ODE_FOUND)
    IF (ODE_FIND_REQUIRED OR ODE_DIR)
	IF (ODE_DIR)
	        MESSAGE(STATUS "ODE library not found, check ODE_DIR")
	ELSE (ODE_DIR)
	        MESSAGE(FATAL_ERROR "ODE library not found, check ODE_DIR")
	ENDIF (ODE_DIR)
    ENDIF (ODE_FIND_REQUIRED OR ODE_DIR)
ENDIF (ODE_FOUND)




